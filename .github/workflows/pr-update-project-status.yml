name: Update Project Status on PR

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]

jobs:
  update-project-status:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: lts/*

      - name: Extract Linked Issues from PR Body
        id: extract
        run: |
          echo "body<<EOF" >> $GITHUB_OUTPUT
          echo "${{ github.event.pull_request.body }}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Parse Linked Issues
        id: parse
        run: |
          echo "$(echo '${{ steps.extract.outputs.body }}' | grep -oiE '(close[sd]?|fix(e[sd])?|resolve[sd]?) #([0-9]+)' | sed -E 's/.*#([0-9]+)/\1/g' | tr '\n' ',' | sed 's/,$//')" > issues.txt
          echo "issues=$(cat issues.txt)" >> $GITHUB_OUTPUT

      - name: Run Project Updater
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PROJECT_NUMBER: "1"
          OWNER: "vegetables-school"
          REPO: "test-1"
        run: |
          node <<'EOF'
          const { execSync } = require("child_process");

          const ghToken = process.env.GH_TOKEN;
          const projectNumber = process.env.PROJECT_NUMBER;
          const owner = process.env.OWNER;
          const repo = process.env.REPO;
          const issuesStr = "${{ steps.parse.outputs.issues }}";

          if (!issuesStr) {
            console.log("No linked issues found.");
            process.exit(0);
          }

          const issueNumbers = issuesStr.split(",").filter(Boolean);
          const fetch = require("node-fetch");

          // 1. 获取 Project v2 ID
          async function getProjectV2Id() {
            const query = `
              query {
                organization(login: "${owner}") {
                  projectV2(number: ${projectNumber}) {
                    id
                  }
                }
              }
            `;
            const res = await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${ghToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });
            const data = await res.json();
            return data.data.organization.projectV2.id;
          }

          // 2. 获取 Project 的所有卡片 items 找到指定 Issue 的 project item id
          async function getProjectItemId(projectId, issueNumber) {
            const issueIdQuery = `
              query {
                repository(owner: "${owner}", name: "${repo}") {
                  issue(number: ${issueNumber}) {
                    id
                  }
                }
              }
            `;
            const issueRes = await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${ghToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query: issueIdQuery }),
            });
            const issueId = (await issueRes.json()).data.repository.issue.id;

            // 注意这里分页只查前50条 如需更多请加循环/分页
            const projectItemsQuery = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    items(first: 50) {
                      nodes {
                        id
                        content {
                          ... on Issue { id number }
                        }
                        fieldValues(first: 20) {
                          nodes {
                            ... on ProjectV2ItemFieldSingleSelectValue {
                              field {
                                ... on ProjectV2SingleSelectField { id name }
                              }
                              name
                              id
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const projectRes = await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${ghToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query: projectItemsQuery }),
            });
            const items = (await projectRes.json()).data.node.items.nodes;
            // 找到对应的卡片 id
            for (const item of items) {
              if (item.content && item.content.id === issueId) {
                return { projectItemId: item.id, fieldValues: item.fieldValues.nodes };
              }
            }
            return null;
          }

          // 3. 获取 Status 字段 id 及 'Progress' 选项 id
          async function getStatusFieldInfo(projectId) {
            const query = `
              query {
                node(id: "${projectId}") {
                  ... on ProjectV2 {
                    fields(first: 20) {
                      nodes {
                        ... on ProjectV2SingleSelectField {
                          id
                          name
                          options {
                            id
                            name
                          }
                        }
                      }
                    }
                  }
                }
              }
            `;
            const res = await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${ghToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query }),
            });
            const fields = (await res.json()).data.node.fields.nodes;
            for (const field of fields) {
              if (field.name.toLowerCase() === "status") {
                const progressOpt = field.options.find(o => o.name.toLowerCase() === "progress");
                return { fieldId: field.id, optionId: progressOpt ? progressOpt.id : null };
              }
            }
            return {};
          }

          // 4. 更新项目卡片字段
          async function updateStatus(projectItemId, fieldId, optionId) {
            const mutation = `
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: "${projectId}"
                  itemId: "${projectItemId}"
                  fieldId: "${fieldId}"
                  value: { singleSelectOptionId: "${optionId}" }
                }) {
                  projectV2Item {
                    id
                  }
                }
              }
            `;
            await fetch("https://api.github.com/graphql", {
              method: "POST",
              headers: {
                "Authorization": `Bearer ${ghToken}`,
                "Content-Type": "application/json",
              },
              body: JSON.stringify({ query: mutation }),
            });
            console.log(`Updated status to 'Progress' for item ${projectItemId}`);
          }

          // 主流程
          (async () => {
            const projectId = await getProjectV2Id();
            const statusInfo = await getStatusFieldInfo(projectId);
            if (!statusInfo.fieldId || !statusInfo.optionId) {
              console.log("Can't find 'Status' field or 'Progress' option.");
              process.exit(0);
            }

            for (const issueNumber of issueNumbers) {
              const itemInfo = await getProjectItemId(projectId, issueNumber);
              if (!itemInfo) {
                console.log(`Issue #${issueNumber} is not in the project.`);
                continue;
              }
              await updateStatus(itemInfo.projectItemId, statusInfo.fieldId, statusInfo.optionId);
            }
          })();
          EOF