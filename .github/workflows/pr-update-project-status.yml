name: Update Project Status on PR

on:
  pull_request:
    types: [opened, ready_for_review, reopened, synchronize]

jobs:
  update-project:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read

    steps:
      - name: Extract linked issues from PR body
        id: extract
        run: |
          echo "issues=$(echo "${{ github.event.pull_request.body }}" | grep -oiE '(close[sd]?|fix(e[sd])?|resolve[sd]?) #([0-9]+)' | sed -E 's/.*#([0-9]+)/\1/g' | tr '\n' ',' | sed 's/,$//')" >> $GITHUB_OUTPUT

      - name: Update Project Status to Progress
        env:
          GH_TOKEN: ${{ secrets.GH_PROJECTS }}
          OWNER: "vegetables-school"
          PROJECT_NUMBER: "1"
          REPO: "test-1"
          ISSUES: ${{ steps.extract.outputs.issues }}
        run: |
          set -xe

          if [ -z "$ISSUES" ]; then
            echo "No linked issues found."
            exit 0
          fi

          # 获取 Project v2 的 id
          project_id=$(gh api graphql -f query='
            query($login: String!, $number: Int!) {
              organization(login: $login) {
                projectV2(number: $number) { id }
              }
            }' -F login="$OWNER" -F number="$PROJECT_NUMBER" --jq '.data.organization.projectV2.id')
          echo "project_id: $project_id"

          # 获取 Status 字段 id 和 Progress 选项 id
          field_data=$(gh api graphql -f query="
            query {
              node(id: \"$project_id\") {
                ... on ProjectV2 {
                  fields(first: 20) {
                    nodes {
                      ... on ProjectV2SingleSelectField {
                        id
                        name
                        options {
                          id
                          name
                        }
                      }
                    }
                  }
                }
              }
            }")
          echo "field_data: $field_data"

          status_field_id=$(echo "$field_data" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .id')
          progress_option_id=$(echo "$field_data" | jq -r '.data.node.fields.nodes[] | select(.name=="Status") | .options[] | select(.name=="Progress") | .id')
          echo "status_field_id: $status_field_id"
          echo "progress_option_id: $progress_option_id"

          IFS=',' read -ra numbers <<< "$ISSUES"
          for issue_number in "${numbers[@]}"; do
            issue_id=$(gh api graphql -f query="
              query {
                repository(owner: \"$OWNER\", name: \"$REPO\") {
                  issue(number: $issue_number) { id }
                }
              }" --jq '.data.repository.issue.id')
            echo "issue #$issue_number id: $issue_id"

            item_id=$(gh api graphql -f query="
              query {
                node(id: \"$project_id\") {
                  ... on ProjectV2 {
                    items(first: 100) {
                      nodes {
                        id
                        content { ... on Issue { id number } }
                      }
                    }
                  }
                }
              }" | jq -r --arg issue_id "$issue_id" '.data.node.items.nodes[] | select(.content.id==$issue_id) | .id')
            echo "item_id for issue #$issue_number: $item_id"

            if [ -z "$item_id" ]; then
              echo "Issue #$issue_number is not in project, skip."
              continue
            fi

            gh api graphql -f query="
              mutation {
                updateProjectV2ItemFieldValue(input: {
                  projectId: \"$project_id\"
                  itemId: \"$item_id\"
                  fieldId: \"$status_field_id\"
                  value: { singleSelectOptionId: \"$progress_option_id\" }
                }) {
                  projectV2Item { id }
                }
              }"
            echo "Updated issue #$issue_number status to Progress."
          done
